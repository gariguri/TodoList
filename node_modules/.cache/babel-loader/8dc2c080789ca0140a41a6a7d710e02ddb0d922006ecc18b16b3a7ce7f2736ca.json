{"ast":null,"code":"var _jsxFileName = \"/Users/gaeon/Documents/\\u1109\\u1175\\u11AB\\u1112\\u1161\\u11AB\\u1110\\u116E\\u110C\\u1161\\u110C\\u1173\\u11BC\\u1100\\u116F\\u11AB_\\u1111\\u1173\\u1103\\u1175\\u110B\\u1161/shinhan_pda/react-base/src/components/PrimeCalculator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useMemo } from 'react';\n//소수를 계산하는 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction calculatePrimes(limit) {\n  console.log(`limit: ${limit}에 대한 소수 계산`);\n  const primes = [];\n  for (let i = 2; i <= limit; i++) {\n    let isPrime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j == 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(i);\n    }\n  }\n  console.log(\"소수 연산 완료\");\n  return primes;\n}\nexport default function PrimeCalculator(props) {\n  _s();\n  const [limit, setLimit] = useState(10);\n  const [count, setCount] = useState(0); //count state가 바뀌었다-> 다시그린다-> 함수를 다시 실행한다.\n  //하지만 다시 함수를 실행할 필요가 없음 -> 낭비이기 때문에 결과적으로 보이는 값들은 같기 때문에 -> useMemo\n\n  const primes = useMemo(() => calculatePrimes(limit), [limit]);\n\n  // const primes=useMemo(()=>{\n  //     return calculatePrimes(limit)}, \n  //     [limit]);\n  //limit이 바뀔 때문에 콜백함수의 리턴 값을 저장할거야\n  //count state가 변경되면 함수를 다시 그리지 않고 건너뛸거야\n  //성능 최적화를 하기위해 사용됨.\n  // const primes = calculatePrimes(limit);\n\n  //동작하는 방식은 같음 \n  //useEffect의 리턴값: 콜백함수\n  //useMemo의 리턴값: 리턴값을 리턴\n  const addCount = () => {\n    setCount(count + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [count, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addCount,\n      children: \"\\uCE74\\uC6B4\\uD2B8 \\uC99D\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: limit,\n      onChange: e => setLimit(Number(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uACC4\\uC0B0\\uB41C \\uC18C\\uC218: \", primes.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(PrimeCalculator, \"7Y+M3wt7TMrLGFDu+ZtoMxlB8R8=\");\n_c = PrimeCalculator;\nvar _c;\n$RefreshReg$(_c, \"PrimeCalculator\");","map":{"version":3,"names":["React","useState","useMemo","jsxDEV","_jsxDEV","calculatePrimes","limit","console","log","primes","i","isPrime","j","push","PrimeCalculator","props","_s","setLimit","count","setCount","addCount","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","Number","target","join","_c","$RefreshReg$"],"sources":["/Users/gaeon/Documents/신한투자증권_프디아/shinhan_pda/react-base/src/components/PrimeCalculator.js"],"sourcesContent":["import React, {useState, useMemo} from 'react';\n//소수를 계산하는 함수\nfunction calculatePrimes(limit) {\n    console.log(`limit: ${limit}에 대한 소수 계산`)\n    const primes = [];\n    for (let i = 2; i <= limit; i++) {\n        let isPrime = true;\n        for (let j = 2; j<i; j++){\n            if (i %j==0){\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            primes.push(i);\n        }\n    }\n    console.log(\"소수 연산 완료\")\n    return primes;\n}\nexport default function PrimeCalculator(props) {\n    const [limit, setLimit] = useState(10);\n    const [count, setCount]=useState(0); //count state가 바뀌었다-> 다시그린다-> 함수를 다시 실행한다.\n    //하지만 다시 함수를 실행할 필요가 없음 -> 낭비이기 때문에 결과적으로 보이는 값들은 같기 때문에 -> useMemo\n\n\n\n    const primes=useMemo(()=>calculatePrimes(limit), [limit]);\n\n    // const primes=useMemo(()=>{\n    //     return calculatePrimes(limit)}, \n    //     [limit]);\n    //limit이 바뀔 때문에 콜백함수의 리턴 값을 저장할거야\n    //count state가 변경되면 함수를 다시 그리지 않고 건너뛸거야\n    //성능 최적화를 하기위해 사용됨.\n    // const primes = calculatePrimes(limit);\n\n\n    //동작하는 방식은 같음 \n    //useEffect의 리턴값: 콜백함수\n    //useMemo의 리턴값: 리턴값을 리턴\n    const addCount=()=>{\n        setCount(count+1);\n    }\n    return (\n        <div>\n            {count}\n            <button onClick={addCount}>카운트 증가</button>\n            <input\n                type=\"number\"\n                value={limit}\n                onChange={(e)=>setLimit(Number(e.target.value))}\n            />\n            <p>계산된 소수: {primes.join(', ')}</p>\n        </div>\n    );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,OAAO,QAAO,OAAO;AAC9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,eAAeA,CAACC,KAAK,EAAE;EAC5BC,OAAO,CAACC,GAAG,CAAE,UAASF,KAAM,YAAW,CAAC;EACxC,MAAMG,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIJ,KAAK,EAAEI,CAAC,EAAE,EAAE;IAC7B,IAAIC,OAAO,GAAG,IAAI;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACF,CAAC,EAAEE,CAAC,EAAE,EAAC;MACrB,IAAIF,CAAC,GAAEE,CAAC,IAAE,CAAC,EAAC;QACRD,OAAO,GAAG,KAAK;QACf;MACJ;IACJ;IACA,IAAIA,OAAO,EAAE;MACTF,MAAM,CAACI,IAAI,CAACH,CAAC,CAAC;IAClB;EACJ;EACAH,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;EACvB,OAAOC,MAAM;AACjB;AACA,eAAe,SAASK,eAAeA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACV,KAAK,EAAEW,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAClB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrC;;EAIA,MAAMQ,MAAM,GAACP,OAAO,CAAC,MAAIG,eAAe,CAACC,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEzD;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA,MAAMc,QAAQ,GAACA,CAAA,KAAI;IACfD,QAAQ,CAACD,KAAK,GAAC,CAAC,CAAC;EACrB,CAAC;EACD,oBACId,OAAA;IAAAiB,QAAA,GACKH,KAAK,eACNd,OAAA;MAAQkB,OAAO,EAAEF,QAAS;MAAAC,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1CtB,OAAA;MACIuB,IAAI,EAAC,QAAQ;MACbC,KAAK,EAAEtB,KAAM;MACbuB,QAAQ,EAAGC,CAAC,IAAGb,QAAQ,CAACc,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eACFtB,OAAA;MAAAiB,QAAA,GAAG,mCAAQ,EAACZ,MAAM,CAACwB,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEd;AAACV,EAAA,CApCuBF,eAAe;AAAAoB,EAAA,GAAfpB,eAAe;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}